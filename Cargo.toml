[[bin]]
name = "substrate"
path = "node/src/main.rs"

[lib]
name = "substrate_node_cli"
path = "node/src/lib.rs"

[package]
name = "substrate"
version = "2.0.0"
authors = ["Parity Technologies <admin@parity.io>"]
build = "build.rs"
edition = "2018"

[dependencies]
log = "0.4"
tokio = "0.1.7"
futures = "0.1"
ctrlc = { version = "3.0", features = ["termination"] }
exit-future = "0.1"
cli = { package = "substrate-cli", path = "core/cli" }
parity-codec = { version = "4.1.1" }
sr-io = { path = "core/sr-io" }
client = { package = "substrate-client", path = "core/client" }
primitives = { package = "substrate-primitives", path = "core/primitives" }
inherents = { package = "substrate-inherents", path = "core/inherents" }
node-runtime = { path = "node/runtime" }
node-primitives = { path = "node/primitives" }
hex-literal = "0.2"
substrate-basic-authorship = { path = "core/basic-authorship" }
substrate-service = { path = "core/service" }
transaction_pool = { package = "substrate-transaction-pool", path = "core/transaction-pool" }
network = { package = "substrate-network", path = "core/network" }
aura = { package = "substrate-consensus-aura", path = "core/consensus/aura" }
aura_primitives = { package = "substrate-consensus-aura-primitives", path = "core/consensus/aura/primitives" }
grandpa = { package = "substrate-finality-grandpa", path = "core/finality-grandpa" }
grandpa_primitives = { package = "substrate-finality-grandpa-primitives", path = "core/finality-grandpa/primitives" }
sr-primitives = { path = "core/sr-primitives" }
substrate-keystore = { path = "core/keystore" }
substrate-telemetry = { package = "substrate-telemetry", path = "core/telemetry" }
structopt = "0.2"
transaction-factory = { path = "test-utils/transaction-factory" }
keyring = { package = "substrate-keyring", path = "core/keyring" }
indices = { package = "srml-indices", path = "srml/indices" }
timestamp = { package = "srml-timestamp", path = "srml/timestamp", default-features = false }
rand = "0.6"
finality_tracker = { package = "srml-finality-tracker", path = "srml/finality-tracker", default-features = false }
contracts = { package = "srml-contracts", path = "srml/contracts" }
system = { package = "srml-system", path = "srml/system" }
balances = { package = "srml-balances", path = "srml/balances" }
trie-root = "0.14.0"
state_machine = { package = "substrate-state-machine", path = "core/state-machine" }
substrate-executor = { path = "core/executor" }
trie = { package = "substrate-trie", path = "core/trie" }

[dev-dependencies]
consensus-common = { package = "substrate-consensus-common", path = "core/consensus/common" }
service-test = { package = "substrate-service-test", path = "core/service/test" }
test-client = { package = "substrate-test-client", path = "core/test-client" }
keyring = { package = "substrate-keyring", path = "core/keyring" }
runtime_support = { package = "srml-support", path = "srml/support" }
balances = { package = "srml-balances", path = "srml/balances" }
session = { package = "srml-session", path = "srml/session" }
staking = { package = "srml-staking", path = "srml/staking" }
system = { package = "srml-system", path = "srml/system" }
timestamp = { package = "srml-timestamp", path = "srml/timestamp" }
treasury = { package = "srml-treasury", path = "srml/treasury" }
contracts = { package = "srml-contracts", path = "srml/contracts" }
indices = { package = "srml-indices", path = "srml/indices" }
wabt = "~0.7.4"

[build-dependencies]
cli = { package = "substrate-cli", path = "core/cli" }
structopt = "0.2"
vergen = "3"

[features]
benchmarks = []

[workspace]
members = [
	"core/cli",
	"core/client",
	"core/client/db",
	"core/consensus/aura",
	"core/consensus/babe",
	"core/consensus/common",
	"core/consensus/rhd",
	"core/consensus/slots",
	"core/executor",
	"core/executor/runtime-test",
	"core/finality-grandpa",
	"core/finality-grandpa/primitives",
	"core/inherents",
	"core/keyring",
	"core/keystore",
	"core/network",
	"core/panic-handler",
	"core/primitives",
	"core/rpc",
	"core/rpc-servers",
	"core/serializer",
	"core/service",
	"core/service/test",
	"core/sr-api-macros",
	"core/sr-io",
	"core/sr-primitives",
	"core/sr-sandbox",
	"core/sr-std",
	"core/sr-version",
	"core/state-machine",
	"core/telemetry",
	"core/test-client",
	"core/test-runtime",
	"core/test-runtime/client",
	"core/transaction-pool",
	"core/transaction-pool/graph",
	"core/trie",
	"core/utils/fork-tree",
	"core/utils/wasm-builder",
	"core/utils/wasm-builder-runner",
	"srml/support",
	"srml/support/procedural",
	"srml/support/procedural/tools",
	"srml/support/procedural/tools/derive",
	"srml/support/test",
	"srml/authorship",
	"srml/assets",
	"srml/aura",
	"srml/balances",
	"srml/contracts",
	"srml/collective",
	"srml/democracy",
	"srml/elections",
	"srml/example",
	"srml/executive",
	"srml/finality-tracker",
	"srml/generic-asset",
	"srml/grandpa",
	"srml/im-online",
	"srml/indices",
	"srml/metadata",
	"srml/session",
	"srml/staking",
	"srml/sudo",
	"srml/system",
	"srml/timestamp",
	"srml/treasury",
	"node/primitives",
	"node/runtime",
	"node/rpc-client",
	"node-template",
	"subkey",
	"test-utils/chain-spec-builder",
]

[badges]
travis-ci = { repository = "paritytech/substrate", branch = "master" }
maintenance = { status = "actively-developed" }
is-it-maintained-issue-resolution = { repository = "paritytech/substrate" }
is-it-maintained-open-issues = { repository = "paritytech/substrate" }

[profile.release]
# Substrate runtime requires unwinding.
panic = "unwind"
