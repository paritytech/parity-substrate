[package]
name = "substrate"
version = "2.0.0-alpha.1"
authors = ["Parity Technologies <admin@parity.io>"]
description = "All Substrate libraries."
readme = "README.md"
keywords = ["substrate"]
homepage = "https://parity.io/substrate"
repository = "https://github.com/enfipy/substrate"
documentation = "https://substrate.dev"
categories = ["blockchain"]
edition = "2018"

[workspace]
members = [
	"bin/node-template",
	"bin/node-template/runtime",
	"bin/node/cli",
	"bin/node/executor",
	"bin/node/primitives",
	"bin/node/rpc-client",
	"bin/node/rpc",
	"bin/node/runtime",
	"bin/node/testing",
	"bin/subkey",
	"client",
	"client/api",
	"client/authority-discovery",
	"client/basic-authorship",
	"client/block-builder",
	"client/chain-spec",
	"client/chain-spec/derive",
	"client/cli",
	"client/consensus/aura",
	"client/consensus/babe",
	"client/consensus/pow",
	"client/consensus/slots",
	"client/consensus/uncles",
	"client/db",
	"client/executor",
	"client/executor/runtime-test",
	"client/finality-grandpa",
	"client/tracing",
	"client/keystore",
	"client/network",
	"client/offchain",
	"client/peerset",
	"client/rpc-servers",
	"client/rpc",
	"client/rpc/api",
	"client/service",
	"client/service/test",
	"client/state-db",
	"client/telemetry",
	"client/transaction-pool",
	"client/transaction-pool/graph",
	"client/utils/wasm-builder-runner",
	"client/grafana-data-source",
	"client/grafana-data-source/test",
	"frame/assets",
	"frame/aura",
	"frame/authority-discovery",
	"frame/authorship",
	"frame/babe",
	"frame/balances",
	"frame/collective",
	"frame/contracts",
	"frame/contracts/rpc",
	"frame/contracts/rpc/runtime-api",
	"frame/democracy",
	"frame/elections-phragmen",
	"frame/elections",
	"frame/evm",
	"frame/example",
	"frame/executive",
	"frame/finality-tracker",
	"frame/generic-asset",
	"frame/grandpa",
	"frame/im-online",
	"frame/indices",
	"frame/membership",
	"frame/metadata",
	"frame/nicks",
	"frame/offences",
	"frame/randomness-collective-flip",
	"frame/scored-pool",
	"frame/session",
	"frame/staking",
	"frame/staking/reward-curve",
	"frame/sudo",
	"frame/support",
	"frame/support/procedural",
	"frame/support/procedural/tools",
	"frame/support/procedural/tools/derive",
	"frame/support/test",
	"frame/system",
	"frame/system/rpc/runtime-api",
	"frame/timestamp",
	"frame/transaction-payment",
	"frame/transaction-payment/rpc",
	"frame/transaction-payment/rpc/runtime-api",
	"frame/treasury",
	"frame/utility",
	"primitives/application-crypto",
	"primitives/authority-discovery",
	"primitives/authorship",
	"primitives/block-builder/runtime-api",
	"primitives/blockchain",
	"primitives/consensus/aura",
	"primitives/consensus/babe",
	"primitives/consensus/common",
	"primitives/consensus/pow",
	"primitives/core",
	"primitives/core/debug-derive",
	"primitives/core/storage",
	"primitives/externalities",
	"primitives/finality-tracker",
	"primitives/finality-grandpa",
	"primitives/inherents",
	"primitives/keyring",
	"primitives/offchain",
	"primitives/panic-handler",
	"primitives/phragmen",
	"primitives/rpc",
	"primitives/runtime-interface",
	"primitives/runtime-interface/proc-macro",
	"primitives/runtime-interface/test-wasm",
	"primitives/serializer",
	"primitives/session",
	"primitives/sr-api",
	"primitives/sr-api/proc-macro",
	"primitives/sr-api/test",
	"primitives/sr-arithmetic",
	"primitives/sr-io",
	"primitives/sr-primitives",
	"primitives/sr-sandbox",
	"primitives/sr-staking-primitives",
	"primitives/sr-std",
	"primitives/sr-version",
	"primitives/state-machine",
	"primitives/timestamp",
	"primitives/transaction-pool",
	"primitives/transaction-pool/runtime-api",
	"primitives/trie",
	"primitives/wasm-interface",
	"test/utils/chain-spec-builder",
	"test/utils/client",
	"test/utils/primitives",
	"test/utils/runtime",
	"test/utils/runtime/client",
	"test/utils/transaction-factory",
	"utils/build-script-utils",
	"utils/fork-tree",
	"utils/frame/rpc/support",
	"utils/frame/rpc/system",
	"utils/wasm-builder",
]

[dependencies]
sc-client = { path = "client", optional = true, version = "*" }
sc-client-api = { path = "client/api", optional = true, version = "*" }
sc-authority-discovery = { path = "client/authority-discovery", optional = true, version = "*" }
sc-basic-authority = { path = "client/basic-authorship", optional = true, version = "*" }
sc-block-builder = { path = "client/block-builder", optional = true, version = "*" }
sc-chain-spec = { path = "client/chain-spec", optional = true, version = "*" }
sc-chain-spec-derive = { path = "client/chain-spec/derive", optional = true, version = "*" }
sc-cli = { path = "client/cli", optional = true, version = "*" }
sc-consensus-aura = { path = "client/consensus/aura", optional = true, version = "*" }
sc-consensus-babe = { path = "client/consensus/babe", optional = true, version = "*" }
sc-consensus-pow = { path = "client/consensus/pow", optional = true, version = "*" }
sc-consensus-slots = { path = "client/consensus/slots", optional = true, version = "*" }
sc-consensus-uncles = { path = "client/consensus/uncles", optional = true, version = "*" }
sc-client-db = { path = "client/db", optional = true, version = "*" }
sc-executor = { path = "client/executor", optional = true, version = "*" }
sc-runtime-test = { path = "client/executor/runtime-test", optional = true, version = "*" }
sc-finality-grandpa = { path = "client/finality-grandpa", optional = true, version = "*" }
sc-tracing = { path = "client/tracing", optional = true, version = "*" }
sc-keystore = { path = "client/keystore", optional = true, version = "*" }
sc-network = { path = "client/network", optional = true, version = "*" }
sc-offchain = { path = "client/offchain", optional = true, version = "*" }
sc-peerset = { path = "client/peerset", optional = true, version = "*" }
sc-rpc-server = { path = "client/rpc-servers", optional = true, version = "*" }
sc-rpc = { path = "client/rpc", optional = true, version = "*" }
sc-rpc-api = { path = "client/rpc/api", optional = true, version = "*" }
sc-service = { path = "client/service", optional = true, version = "*" }
sc-service-test = { path = "client/service/test", optional = true, version = "*" }
sc-state-db = { path = "client/state-db", optional = true, version = "*" }
sc-telemetry = { path = "client/telemetry", optional = true, version = "*" }
sc-transaction-pool = { path = "client/transaction-pool", optional = true, version = "*" }
sc-transaction-graph = { path = "client/transaction-pool/graph", optional = true, version = "*" }
substrate-wasm-builder-runner = { path = "client/utils/wasm-builder-runner", optional = true, version = "*" }
grafana-data-source = { path = "client/grafana-data-source", optional = true, version = "*" }
grafana-data-source-test = { path = "client/grafana-data-source/test", optional = true, version = "*" }
pallet-assets = { path = "frame/assets", optional = true, version = "*" }
pallet-aura = { path = "frame/aura", optional = true, version = "*" }
pallet-authority-discovery = { path = "frame/authority-discovery", optional = true, version = "*" }
pallet-authorship = { path = "frame/authorship", optional = true, version = "*" }
pallet-babe = { path = "frame/babe", optional = true, version = "*" }
pallet-balances = { path = "frame/balances", optional = true, version = "*" }
pallet-collective = { path = "frame/collective", optional = true, version = "*" }
pallet-contracts = { path = "frame/contracts", optional = true, version = "*" }
pallet-contracts-rpc = { path = "frame/contracts/rpc", optional = true, version = "*" }
pallet-contracts-rpc-runtime-api = { path = "frame/contracts/rpc/runtime-api", optional = true, version = "*" }
pallet-democracy = { path = "frame/democracy", optional = true, version = "*" }
pallet-elections-phragmen = { path = "frame/elections-phragmen", optional = true, version = "*" }
pallet-elections = { path = "frame/elections", optional = true, version = "*" }
pallet-evm = { path = "frame/evm", optional = true, version = "*" }
pallet-example = { path = "frame/example", optional = true, version = "*" }
frame-executive = { path = "frame/executive", optional = true, version = "*" }
pallet-finality-tracker = { path = "frame/finality-tracker", optional = true, version = "*" }
pallet-generic-asset = { path = "frame/generic-asset", optional = true, version = "*" }
pallet-grandpa = { path = "frame/grandpa", optional = true, version = "*" }
pallet-im-online = { path = "frame/im-online", optional = true, version = "*" }
pallet-indices = { path = "frame/indices", optional = true, version = "*" }
pallet-membership = { path = "frame/membership", optional = true, version = "*" }
frame-metadata = { path = "frame/metadata", optional = true, version = "*" }
pallet-nicks = { path = "frame/nicks", optional = true, version = "*" }
pallet-offences = { path = "frame/offences", optional = true, version = "*" }
pallet-randomness-collective-flip = { path = "frame/randomness-collective-flip", optional = true, version = "*" }
pallet-scored-pool = { path = "frame/scored-pool", optional = true, version = "*" }
pallet-session = { path = "frame/session", optional = true, version = "*" }
pallet-staking = { path = "frame/staking", optional = true, version = "*" }
pallet-staking-reward-curve = { path = "frame/staking/reward-curve", optional = true, version = "*" }
pallet-sudo = { path = "frame/sudo", optional = true, version = "*" }
frame-support = { path = "frame/support", optional = true, version = "*" }
frame-support-procedural = { path = "frame/support/procedural", optional = true, version = "*" }
frame-support-procedural-tools = { path = "frame/support/procedural/tools", optional = true, version = "*" }
frame-support-procedural-tools-derive = { path = "frame/support/procedural/tools/derive", optional = true, version = "*" }
frame-support-test = { path = "frame/support/test", optional = true, version = "*" }
frame-system = { path = "frame/system", optional = true, version = "*" }
frame-system-rpc-runtime-api = { path = "frame/system/rpc/runtime-api", optional = true, version = "*" }
pallet-timestamp = { path = "frame/timestamp", optional = true, version = "*" }
pallet-transaction-payment = { path = "frame/transaction-payment", optional = true, version = "*" }
pallet-transaction-payment-rpc = { path = "frame/transaction-payment/rpc", optional = true, version = "*" }
pallet-transaction-payment-rpc-runtime-api = { path = "frame/transaction-payment/rpc/runtime-api", optional = true, version = "*" }
pallet-treasury = { path = "frame/treasury", optional = true, version = "*" }
frame-utility = { path = "frame/utility", optional = true, version = "*" }
sc-application-crypto = { path = "primitives/application-crypto", optional = true, version = "*" }
sp-authority-discovery = { path = "primitives/authority-discovery", optional = true, version = "*" }
sp-authorship = { path = "primitives/authorship", optional = true, version = "*" }
sp-block-builder = { path = "primitives/block-builder/runtime-api", optional = true, version = "*" }
sp-blockchain = { path = "primitives/blockchain", optional = true, version = "*" }
sp-consensus-aura = { path = "primitives/consensus/aura", optional = true, version = "*" }
sp-consensus-babe = { path = "primitives/consensus/babe", optional = true, version = "*" }
sp-consensus = { path = "primitives/consensus/common", optional = true, version = "*" }
sp-consensus-pow = { path = "primitives/consensus/pow", optional = true, version = "*" }
sp-core = { path = "primitives/core", optional = true, version = "*" }
sp-debug-derive = { path = "primitives/core/debug-derive", optional = true, version = "*" }
sp-core-storage = { path = "primitives/core/storage", optional = true, version = "*" }
sp-externalities = { path = "primitives/externalities", optional = true, version = "*" }
sp-finality-tracker = { path = "primitives/finality-tracker", optional = true, version = "*" }
sp-finality-grandpa = { path = "primitives/finality-grandpa", optional = true, version = "*" }
sp-inherents = { path = "primitives/inherents", optional = true, version = "*" }
sp-keyring = { path = "primitives/keyring", optional = true, version = "*" }
sp-offchain = { path = "primitives/offchain", optional = true, version = "*" }
sp-panic-handler = { path = "primitives/panic-handler", optional = true, version = "*" }
sp-phragmen = { path = "primitives/phragmen", optional = true, version = "*" }
sp-rpc = { path = "primitives/rpc", optional = true, version = "*" }
sp-runtime-interface = { path = "primitives/runtime-interface", optional = true, version = "*" }
sp-runtime-interface-proc-macro = { path = "primitives/runtime-interface/proc-macro", optional = true, version = "*" }
sp-runtime-interface-test-wasm = { path = "primitives/runtime-interface/test-wasm", optional = true, version = "*" }
sp-serializer = { path = "primitives/serializer", optional = true, version = "*" }
sp-session = { path = "primitives/session", optional = true, version = "*" }
sp-api = { path = "primitives/sr-api", optional = true, version = "*" }
sp-api-proc-macro = { path = "primitives/sr-api/proc-macro", optional = true, version = "*" }
sp-api-test = { path = "primitives/sr-api/test", optional = true, version = "*" }
sp-arithmetic = { path = "primitives/sr-arithmetic", optional = true, version = "*" }
sp-io = { path = "primitives/sr-io", optional = true, version = "*" }
sp-runtime = { path = "primitives/sr-primitives", optional = true, version = "*" }
sp-sandbox = { path = "primitives/sr-sandbox", optional = true, version = "*" }
sp-staking = { path = "primitives/sr-staking-primitives", optional = true, version = "*" }
sp-std = { path = "primitives/sr-std", optional = true, version = "*" }
sp-version = { path = "primitives/sr-version", optional = true, version = "*" }
sp-state-machine = { path = "primitives/state-machine", optional = true, version = "*" }
sp-timestamp = { path = "primitives/timestamp", optional = true, version = "*" }
sp-transaction-pool-api = { path = "primitives/transaction-pool", optional = true, version = "*" }
sp-transaction-pool-runtime-api = { path = "primitives/transaction-pool/runtime-api", optional = true, version = "*" }
sp-trie = { path = "primitives/trie", optional = true, version = "*" }
sp-wasm-interface = { path = "primitives/wasm-interface", optional = true, version = "*" }
chain-spec-builder = { path = "test/utils/chain-spec-builder", optional = true, version = "*" }
substrate-test-client = { path = "test/utils/client", optional = true, version = "*" }
substrate-test-primitives = { path = "test/utils/primitives", optional = true, version = "*" }
substrate-test-runtime = { path = "test/utils/runtime", optional = true, version = "*" }
substrate-test-runtime-client = { path = "test/utils/runtime/client", optional = true, version = "*" }
transaction-factory = { path = "test/utils/transaction-factory", optional = true, version = "*" }
substrate-build-script-utils = { path = "utils/build-script-utils", optional = true, version = "*" }
fork-tree = { path = "utils/fork-tree", optional = true, version = "*" }
substrate-frame-rpc-support = { path = "utils/frame/rpc/support", optional = true, version = "*" }
substrate-frame-rpc-system = { path = "utils/frame/rpc/system", optional = true, version = "*" }
substrate-wasm-builder = { path = "utils/wasm-builder", optional = true, version = "*" }

[features]
default = ["frame-system"]

client = ["sc-client"]
client-api = ["sc-client-api"]
client-authority-discovery = ["sc-authority-discovery"]
client-basic-authority = ["sc-basic-authority"]
client-block-builder = ["sc-block-builder"]
client-chain-spec = ["sc-chain-spec"]
client-chain-spec-derive = ["sc-chain-spec-derive"]
client-cli = ["sc-cli"]
client-consensus-aura = ["sc-consensus-aura"]
client-consensus-babe = ["sc-consensus-babe"]
client-consensus-pow = ["sc-consensus-pow"]
client-consensus-slots = ["sc-consensus-slots"]
client-consensus-uncles = ["sc-consensus-uncles"]
client-db = ["sc-client-db"]
client-executor = ["sc-executor"]
client-executor-runtime-test = ["sc-runtime-test"]
client-finality-grandpa = ["sc-finality-grandpa"]
client-tracing = ["sc-tracing"]
client-keystore = ["sc-keystore"]
client-network = ["sc-network"]
client-offchain = ["sc-offchain"]
client-peerset = ["sc-peerset"]
client-rpc-server = ["sc-rpc-server"]
client-rpc = ["sc-rpc"]
client-rpc-api = ["sc-rpc-api"]
client-service = ["sc-service"]
client-service-test = ["sc-service-test"]
client-state-db = ["sc-state-db"]
client-telemetry = ["sc-telemetry"]
client-transaction-pool = ["sc-transaction-pool"]
client-transaction-pool-graph = ["sc-transaction-graph"]
client-utils-wasm-builder-runner = ["substrate-wasm-builder-runner"]
client-grafana-data-source = ["grafana-data-source"]
client-grafana-data-source-test = ["grafana-data-source-test"]
frame-assets = ["pallet-assets"]
frame-aura = ["pallet-aura"]
frame-authority-discovery = ["pallet-authority-discovery"]
frame-authorship = ["pallet-authorship"]
frame-babe = ["pallet-babe"]
frame-balances = ["pallet-balances"]
frame-collective = ["pallet-collective"]
frame-contracts = ["pallet-contracts"]
frame-contracts-rpc = ["pallet-contracts-rpc"]
frame-contracts-rpc-runtime-api = ["pallet-contracts-rpc-runtime-api"]
frame-democracy = ["pallet-democracy"]
frame-elections-phragmen = ["pallet-elections-phragmen"]
frame-elections = ["pallet-elections"]
frame-evm = ["pallet-evm"]
frame-example = ["pallet-example"]
sf-frame-executive = ["frame-executive"]
frame-finality-tracker = ["pallet-finality-tracker"]
frame-generic-asset = ["pallet-generic-asset"]
frame-grandpa = ["pallet-grandpa"]
frame-im-online = ["pallet-im-online"]
frame-indices = ["pallet-indices"]
frame-membership = ["pallet-membership"]
sf-frame-metadata = ["frame-metadata"]
frame-nicks = ["pallet-nicks"]
frame-offences = ["pallet-offences"]
frame-randomness-collective-flip = ["pallet-randomness-collective-flip"]
frame-scored-pool = ["pallet-scored-pool"]
frame-session = ["pallet-session"]
frame-staking = ["pallet-staking"]
frame-staking-reward-curve = ["pallet-staking-reward-curve"]
frame-sudo = ["pallet-sudo"]
sf-frame-support = ["frame-support"]
sf-frame-support-procedural = ["frame-support-procedural"]
sf-frame-support-procedural-tools = ["frame-support-procedural-tools"]
sf-frame-support-procedural-tools-derive = ["frame-support-procedural-tools-derive"]
sf-frame-support-test = ["frame-support-test"]
sf-frame-system = ["frame-system"]
sf-frame-system-rpc-runtime-api = ["frame-system-rpc-runtime-api"]
frame-timestamp = ["pallet-timestamp"]
frame-transaction-payment = ["pallet-transaction-payment"]
frame-transaction-payment-rpc = ["pallet-transaction-payment-rpc"]
frame-transaction-payment-rpc-runtime-api = ["pallet-transaction-payment-rpc-runtime-api"]
frame-treasury = ["pallet-treasury"]
sf-frame-utility = ["frame-utility"]
primitives-application-crypto = ["sc-application-crypto"]
primitives-authority-discovery = ["sp-authority-discovery"]
primitives-authorship = ["sp-authorship"]
primitives-block-builder-runtime-api = ["sp-block-builder"]
primitives-blockchain = ["sp-blockchain"]
primitives-consensus-aura = ["sp-consensus-aura"]
primitives-consensus-babe = ["sp-consensus-babe"]
primitives-consensus-common = ["sp-consensus"]
primitives-consensus-pow = ["sp-consensus-pow"]
primitives-core = ["sp-core"]
primitives-core-debug-derive = ["sp-debug-derive"]
primitives-core-storage = ["sp-core-storage"]
primitives-externalities = ["sp-externalities"]
primitives-finality-tracker = ["sp-finality-tracker"]
primitives-finality-grandpa = ["sp-finality-grandpa"]
primitives-inherents = ["sp-inherents"]
primitives-keyring = ["sp-keyring"]
primitives-offchain = ["sp-offchain"]
primitives-panic-handler = ["sp-panic-handler"]
primitives-phragmen = ["sp-phragmen"]
primitives-rpc = ["sp-rpc"]
primitives-runtime-interface = ["sp-runtime-interface"]
primitives-runtime-interface-proc-macro = ["sp-runtime-interface-proc-macro"]
primitives-runtime-interface-test-wasm = ["sp-runtime-interface-test-wasm"]
primitives-serializer = ["sp-serializer"]
primitives-session = ["sp-session"]
primitives-sr-api = ["sp-api"]
primitives-sr-api-proc-macro = ["sp-api-proc-macro"]
primitives-sr-api-test = ["sp-api-test"]
primitives-sr-arithmetic = ["sp-arithmetic"]
primitives-sr-io = ["sp-io"]
primitives-sr-primitives = ["sp-runtime"]
primitives-sr-sandbox = ["sp-sandbox"]
primitives-sr-staking-primitives = ["sp-staking"]
primitives-sr-std = ["sp-std"]
primitives-sr-version = ["sp-version"]
primitives-state-machine = ["sp-state-machine"]
primitives-timestamp = ["sp-timestamp"]
primitives-transaction-pool = ["sp-transaction-pool-api"]
primitives-transaction-pool-runtime-api = ["sp-transaction-pool-runtime-api"]
primitives-trie = ["sp-trie"]
primitives-wasm-interface = ["sp-wasm-interface"]
test-utils-chain-spec-builder = ["chain-spec-builder"]
test-utils-client = ["substrate-test-client"]
test-utils-primitives = ["substrate-test-primitives"]
test-utils-runtime = ["substrate-test-runtime"]
test-utils-runtime-client = ["substrate-test-runtime-client"]
test-utils-transaction-factory = ["transaction-factory"]
utils-build-script-utils = ["substrate-build-script-utils"]
utils-fork-tree = ["fork-tree"]
utils-frame-rpc-support = ["substrate-frame-rpc-support"]
utils-frame-rpc-system = ["substrate-frame-rpc-system"]
utils-wasm-builder = ["substrate-wasm-builder"]

[profile.release]
# Substrate runtime requires unwinding.
panic = "unwind"
