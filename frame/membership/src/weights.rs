// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// 	http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for pallet_membership
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 3.0.0
//! DATE: 2021-04-16, STEPS: `[5, ]`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Native), WASM-EXECUTION: Interpreted, CHAIN: None, DB CACHE: 128

// Executed Command:
// target/release/substrate
// benchmark
// --steps=5
// --repeat=2
// --pallet=pallet_membership
// --extrinsic=*
// --execution
// Native
// --output
// .

#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

pub trait WeightInfo {
	fn add_member(m: u32, ) -> Weight;
	fn remove_member(m: u32, ) -> Weight;
	fn swap_member(m: u32, ) -> Weight;
	fn reset_member(m: u32, ) -> Weight;
	fn change_key(m: u32, ) -> Weight;
	fn set_prime(m: u32, ) -> Weight;
	fn clear_prime(_m: u32, ) -> Weight;
}

/// Weight functions for pallet_membership.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	fn add_member(m: u32, ) -> Weight {
		(12_720_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((140_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(2 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn remove_member(m: u32, ) -> Weight {
		(14_656_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((147_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn swap_member(m: u32, ) -> Weight {
		(14_548_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((157_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn reset_member(m: u32, ) -> Weight {
		(17_380_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((233_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(3 as Weight))
	}
	fn change_key(m: u32, ) -> Weight {
		(14_718_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((160_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(3 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	fn set_prime(m: u32, ) -> Weight {
		(3_330_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((131_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	fn clear_prime(_m: u32, ) -> Weight {
		(1_126_000 as Weight)
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
}

impl WeightInfo for () {
	fn add_member(m: u32, ) -> Weight {
		(12_720_000 as Weight)
			// Standard Error: 2_000
			.saturating_add((140_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(2 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn remove_member(m: u32, ) -> Weight {
		(14_656_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((147_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn swap_member(m: u32, ) -> Weight {
		(14_548_000 as Weight)
			// Standard Error: 3_000
			.saturating_add((157_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn reset_member(m: u32, ) -> Weight {
		(17_380_000 as Weight)
			// Standard Error: 57_000
			.saturating_add((233_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(3 as Weight))
	}
	fn change_key(m: u32, ) -> Weight {
		(14_718_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((160_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(3 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	fn set_prime(m: u32, ) -> Weight {
		(3_330_000 as Weight)
			// Standard Error: 1_000
			.saturating_add((131_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	fn clear_prime(_m: u32, ) -> Weight {
		(1_126_000 as Weight)
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
}
